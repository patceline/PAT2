%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
% Setting up the problem
% 
% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% If masses need to be changed, do it here.
% Default is to output as many values as in the file containing data, i.e.
% if the file contains 10 years of data with 1 value per day, then the
% output will be 1 value per day for 10 years too. This can also be
% modified (change tf and tspan)
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


function [mu,mass,actual_position,y0,tspan] ...
          = setup2     

global corr year 

G = 6.67259e-20; % in km^3/(kg s^2)

% asteroid mass
mass_apo = 26.99e9; % in kg
% planets without moons (+ earth)
mass_mer = 0.330104*1e24;
mass_ven = 4.86732*1e24;
mass_ear = 5.97219*1e24;
% moons of planets
mar_moons_mu = 0.0007112+0.0000985;
mar_moons_mass = mar_moons_mu/G;
jup_moons_mu = 5959.916 + 3202.739 + 9887.834 + 7179.289 + 0.138+0.45;
jup_moons_mass = jup_moons_mu/G;
sat_moons_mu = 2.5026 + 7.2027 + 41.2067 + 73.1146 + 153.9426 + ...
               8978.1382 + 0.3727 + 120.5038 + 0.5532 + 0.1263 + 0.0351;
sat_moons_mass = sat_moons_mu/G;
ura_moons_mu = 86.4 + 81.5 + 228.2 + 192.4 + 4.4 + 0.0030 + 0.0036 + ...
               0.0062 + 0.0229 + 0.0119 + 0.0372 + 0.1122 + 0.1931;
ura_moons_mass = ura_moons_mu/G;
nep_moons_mu = 1427.6 + 2.06 + 0.013 + 0.025 + 0.14 + 0.25 + 3.36 + 0.33;
nep_moons_mass = nep_moons_mu/G;
plu_moons_mu = 102.3 + 0.0013 + 0.0065 + 0.0011;
plu_moons_mass = plu_moons_mu/G;
% planets with moons (total mass)
mass_marbary = 0.641693*1e24 + mar_moons_mass;
mass_jupbary = 1898.13*1e24 + jup_moons_mass;
mass_satbary = 568.319*1e24 + sat_moons_mass;
mass_urabary = 86.8103*1e24 + ura_moons_mass;
mass_nepbary = 102.410*1e24 + nep_moons_mass;
mass_plubary = 0.01309*1e24 + plu_moons_mass;
% planets without moons (+ earth)
mu_mer = mass_mer*G;
mu_ven = mass_ven*G;
mu_ear = mass_ear*G;
% planets with moons (total mu)
mu_marbary = mass_marbary*G + mar_moons_mu;
mu_jupbary = mass_jupbary*G + jup_moons_mu;
mu_satbary = mass_satbary*G + sat_moons_mu;
mu_urabary = mass_urabary*G + ura_moons_mu;
mu_nepbary = mass_nepbary*G + nep_moons_mu;
mu_plubary = mass_plubary*G + plu_moons_mu;
% others
mu_moo = 4902.801; 
mass_moo = mu_moo/G;
mu_apo = mass_apo*G;
mu_cer = 63.2; 
mass_cer = mu_cer/G;
mu_pal = 14.3;
mass_pal = mu_pal/G;
mu_ves = 17.8;
mass_ves = mu_ves/G;
mu_sun = 1.32712440018*10^11; 
mass_sun = mu_sun/G;

% vector containing the value of mu for each body
mu = [mu_apo;mu_sun;mu_mer;mu_ven;mu_ear;mu_marbary;mu_jupbary;...
      mu_satbary;mu_urabary;mu_nepbary;mu_cer;mu_pal;mu_ves;...
      mu_moo;mu_plubary];
% vector containing the mass for each body           
mass = [mass_apo;mass_sun;mass_mer;mass_ven;mass_ear;mass_marbary;...
        mass_jupbary;mass_satbary;mass_urabary;mass_nepbary;...
        mass_cer;mass_pal;mass_ves;mass_moo;mass_plubary];    
    
% data for each body
% http://ssd.jpl.nasa.gov/horizons.cgi#top
% These are data corresponding to Jan 1 2014 to Jan 1 2024
load sun
load mer
load ven
load ear
load marbary
load jupbary
load satbary
load urabary
load nepbary
load cer
load pal
load ves
load moo
load apo
load plubary


% set up initial state vectors for each body    
r0_apo = [apo(1,1)...
          apo(1,2)...
          apo(1,3)];
v0_apo = [apo(1,4)...
          apo(1,5)...
          apo(1,6)];
                 
r0_sun = [sun(1,1)...
          sun(1,2)...
          sun(1,3)];
v0_sun = [sun(1,4)...
          sun(1,5)...
          sun(1,6)];

r0_mer = [mer(1,1)...
          mer(1,2)...
          mer(1,3)];
v0_mer = [mer(1,4)...
          mer(1,5)...
          mer(1,6)];

r0_ven = [ven(1,1)...
          ven(1,2)...
          ven(1,3)];
v0_ven = [ven(1,4)...
          ven(1,5)...
          ven(1,6)];

r0_ear = [ear(1,1)...
          ear(1,2)...
          ear(1,3)];
v0_ear = [ear(1,4)...
          ear(1,5)...
          ear(1,6)];  
      
r0_marbary = [marbary(1,1)...
              marbary(1,2)...
              marbary(1,3)];
v0_marbary = [marbary(1,4)...
              marbary(1,5)...
              marbary(1,6)];

r0_jupbary = [jupbary(1,1)...
              jupbary(1,2)...
              jupbary(1,3)];
v0_jupbary = [jupbary(1,4)...
              jupbary(1,5)...
              jupbary(1,6)];

r0_satbary = [satbary(1,1)...
              satbary(1,2)...
              satbary(1,3)];
v0_satbary = [satbary(1,4)...
              satbary(1,5)...
              satbary(1,6)];

r0_urabary = [urabary(1,1)...
              urabary(1,2)...
              urabary(1,3)];
v0_urabary = [urabary(1,4)...
              urabary(1,5)...
              urabary(1,6)];
                
r0_nepbary = [nepbary(1,1)...
              nepbary(1,2)...
              nepbary(1,3)];
v0_nepbary = [nepbary(1,4)...
              nepbary(1,5)...
              nepbary(1,6)];

r0_cer = [cer(1,1)...
          cer(1,2)...
          cer(1,3)];
v0_cer = [cer(1,4)...
          cer(1,5)...
          cer(1,6)];

r0_pal = [pal(1,1)...
          pal(1,2)...
          pal(1,3)];
v0_pal = [pal(1,4)...
          pal(1,5)...
          pal(1,6)];
                       
r0_ves = [ves(1,1)...
          ves(1,2)...
          ves(1,3)];
v0_ves = [ves(1,4)...
          ves(1,5)...
          ves(1,6)];
                 
r0_moo = [moo(1,1)...
          moo(1,2)...
          moo(1,3)];
v0_moo = [moo(1,4)...
          moo(1,5)...
          moo(1,6)];  
                 
r0_plubary = [plubary(1,1)...
              plubary(1,2)...
              plubary(1,3)];
v0_plubary = [plubary(1,4)...
              plubary(1,5)...
              plubary(1,6)];                  


y0 = [r0_apo ...
          r0_sun r0_mer r0_ven r0_ear r0_marbary r0_jupbary ...
          r0_satbary r0_urabary r0_nepbary r0_cer r0_pal r0_ves ...
          r0_moo r0_plubary...
          v0_apo ...
          v0_sun v0_mer v0_ven v0_ear v0_marbary v0_jupbary ...
          v0_satbary v0_urabary v0_nepbary v0_cer v0_pal v0_ves ...
          v0_moo v0_plubary]';
  

% initial time for integration
t0 = 0;

% real data to compare to the numerical results
actual_position = apo(:,1:3);

% final time for integration
tf = (length(actual_position)-1)*24*60*60; % in seconds
tf = tf/year; % in years

% time step of 1 day
steps = length(actual_position); 
% output state vector: 1 value per day
tspan = linspace(t0,tf,steps);

% correct mu to account for new units
mu = mu*year^2/corr^3; 

end 
